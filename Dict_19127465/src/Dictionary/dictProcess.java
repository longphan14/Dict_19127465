/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Dictionary;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * @author Long Phan
 */
public class dictProcess extends javax.swing.JFrame {

    /**
     * Creates new form dictProcess
     */
    public dictProcess() {
        initComponents();
    }
    
    public static void messageBox(String infoMessage, String titleBar)
    {
        JOptionPane.showMessageDialog(null, infoMessage, titleBar, JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        addSlangWord = new javax.swing.JTextField();
        addDefiWord = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        deleteSlangWord = new javax.swing.JTextField();
        deleteButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        editSlangWord = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        newDefi = new javax.swing.JTextField();
        editButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Add Slang Word");

        jLabel2.setText("Enter Slang Word");

        jLabel3.setText("Enter Definition");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Delete Slang Word");

        jLabel5.setText("Enter Slang Word");

        deleteSlangWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSlangWordActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Edit Slang Word");

        editSlangWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSlangWordActionPerformed(evt);
            }
        });

        jLabel7.setText("Enter Slang Word");

        jLabel8.setText("Enter New Definition");

        newDefi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDefiActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(newDefi, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 57, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(deleteSlangWord, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(addSlangWord)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(editSlangWord, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(addDefiWord)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addGap(0, 0, Short.MAX_VALUE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel1)
                                        .addGap(173, 173, 173)
                                        .addComponent(backButton)
                                        .addGap(26, 26, 26))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(211, 211, 211)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel4)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(addButton)
                                            .addGap(12, 12, 12))
                                        .addComponent(deleteButton)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(240, 240, 240)
                .addComponent(editButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addSlangWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addDefiWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addButton)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(8, 8, 8)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteSlangWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(11, 11, 11)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editSlangWord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(newDefi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editButton)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteSlangWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSlangWordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteSlangWordActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        String SlangWord = addSlangWord.getText();
        String DefinitionWord = addDefiWord.getText();
        String completeWord = SlangWord + "`" + DefinitionWord;
        String nameFile = "resources/slang.txt";
        File file = new File(nameFile);

        if (SlangWord.equals("") || DefinitionWord.equals("")) {
            dictProcess.messageBox("Slang Word hoặc Definition bị trống", "Thông Báo:");
        } else {
            try {
                Scanner scanner = new Scanner(file);
                List<String> fullData = new ArrayList<>(Files.readAllLines(Path.of(nameFile)));
                boolean check = false;
                while (scanner.hasNextLine()) {

                    String line = scanner.nextLine();
                    String[] slangWordIndex = line.split("`");
                    String slangInData = slangWordIndex[0];

                    if (slangInData.toLowerCase().equals(SlangWord.toLowerCase())) {
                        check = true;
                        String[] choices = new String[2];

                        //Chọn Duplicate Hay Override
                        choices[0] = "Duplicate";
                        choices[1] = "Override";

                        int result = JOptionPane.showOptionDialog(this.getContentPane(), "Slang Đã Tồn Tại: ", "Thông Báo", 0,
                                JOptionPane.INFORMATION_MESSAGE, null, choices, null);

                        if (result == 0) {
                            for (int i = 0; i < fullData.size(); i++) {
                                if (fullData.get(i).equals(line)) {
                                    fullData.add(i + 1, completeWord);
                                    break;
                                }
                            }

                        }
                        if (result == 1) {
                            for (int i = 0; i < fullData.size(); i++) {
                                if (fullData.get(i).equals(line)) {
                                    fullData.set(i, completeWord);
                                    break;
                                }
                            }
                        }
                        if (result == -1) {
                            break;
                        }

                        Files.write(Path.of(nameFile), fullData);
                        dispose();
                        break;
                    }

                }
                if (!check) {
                    fullData.add(completeWord);
                    Files.write(Path.of(nameFile), fullData);
                    dispose();
                }
            } catch (Exception e) {
                System.out.println("Add Không Thành Công!!");
            }
            dispose();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        String SlangWord = deleteSlangWord.getText();
        String nameFile = "resources/slang.txt";

        if (SlangWord.equals("")) {
            dictProcess.messageBox("Slang Word bị trống", "Thông Báo:");
        } else {
            File file = new File(nameFile);
            try {
                Scanner scanner = new Scanner(file);
                List<String> fullData = new ArrayList<>(Files.readAllLines(Path.of(nameFile)));
                boolean check = false;
                while (scanner.hasNextLine()) {

                    String line = scanner.nextLine();
                    String[] slangWordIndex = line.split("`");
                    String slang = slangWordIndex[0];
                    if (slang.toLowerCase().equals(SlangWord.toLowerCase())) {
                        check = true;
                        for (int i = 0; i < fullData.size(); i++) {
                            if (fullData.get(i).equals(line)) {
                                fullData.remove(i);
                            }
                        }
                        Files.write(Path.of(nameFile), fullData);
                        continue;
                    }

                }
                if (!check) {
                    JOptionPane.showMessageDialog(this.getContentPane(), "Không tìm thấy Slang Word");
                }
            } catch (Exception e) {
                System.out.println("Delete Không Thành Công!!");
            }
            dispose();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        String SlangWord = editSlangWord.getText();
        String DefinitionWord = newDefi.getText();
        String completeWord = SlangWord + "`" + DefinitionWord;
        String nameFile = "resources/slang.txt";

        if (SlangWord.equals("") || DefinitionWord.equals("")) {
            dictProcess.messageBox("Slang Word hoặc Definition bị trống", "Thông Báo:");
        } else {
            File file = new File(nameFile);
            try {
                Scanner scanner = new Scanner(file);
                List<String> fullData = new ArrayList<>(Files.readAllLines(Path.of(nameFile)));
                boolean check = false;
                while (scanner.hasNextLine()) {

                    String line = scanner.nextLine();
                    String[] SlangWordIndex = line.split("`");
                    String slang = SlangWordIndex[0];
                    if (slang.toLowerCase().equals(SlangWord.toLowerCase())) {
                        check = true;
                        String NewSlang = completeWord;

                        for (int i = 0; i < fullData.size(); i++) {
                            if (fullData.get(i).equals(line)) {
                                fullData.set(i, NewSlang);
                            }
                        }
                        Files.write(Path.of(nameFile), fullData);
                        continue;
                    }

                }
                if (!check) {
                    JOptionPane.showMessageDialog(this.getContentPane(), "Không tìm thấy Slang Word, Xin thử lại");
                }
            } catch (Exception e) {
                System.out.println("Edit Không Thành Công!!");
            }
            dispose();
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void editSlangWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSlangWordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editSlangWordActionPerformed

    private void newDefiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDefiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newDefiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dictProcess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dictProcess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dictProcess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dictProcess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dictProcess().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField addDefiWord;
    private javax.swing.JTextField addSlangWord;
    private javax.swing.JButton backButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField deleteSlangWord;
    private javax.swing.JButton editButton;
    private javax.swing.JTextField editSlangWord;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField newDefi;
    // End of variables declaration//GEN-END:variables
}
